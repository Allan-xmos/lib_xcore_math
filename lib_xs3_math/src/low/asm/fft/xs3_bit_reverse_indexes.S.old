
#if defined(__XS3A__)
#ifndef XS3_MATH_NO_ASM

/*  

void xs3_bit_reverse_indexes_shr(
    complex_s32_t* a,
    const unsigned length);

*/

#include "../asm_helper.h"

.text
.issue_mode dual

#define FUNCTION_NAME   xs3_bit_reverse_indexes

#define NSTACKWORDS 10

#define a           r0
#define N           r1
// #define a_shr       r2
#define realA       r3
#define imagA       r4
#define realB       r5
#define imagB       r6
#define Q_shr       r7
#define cmp         r8
#define Q           r11

ASM_PREAMBLE(FUNCTION_NAME)
FUNCTION_NAME:
        dualentsp NSTACKWORDS
        std r4, r5, sp[1]
        std r6, r7, sp[2]
        std r8, r9, sp[3]

    {   mov r9, N                               ;   clz Q_shr, N                            }
    {   add Q_shr, Q_shr, 1                     ;   sub N, N, 1                             }
    
    .L_loop_top:
        {   bitrev Q, N                             ;                                           }
        {   shr Q, Q, Q_shr                         ;                                           }
        {   lsu cmp, Q, N                           ;                                           }
        {                                           ;   bf cmp, .L_loop_bot                     }
            ldd imagA, realA, a[N]
            ldd imagB, realB, a[Q]
            std imagB, realB, a[N]
            std imagA, realA, a[Q]
        .L_loop_bot:
        {   sub N, N, 1                             ;   bt N, .L_loop_top                       }

    ldd r4, r5, sp[1]
    ldd r6, r7, sp[2]
    ldd r8, r9, sp[3]
    retsp NSTACKWORDS

ASM_POSTAMBLE(FUNCTION_NAME, NSTACKWORDS)




#endif //!defined(XS3_MATH_NO_ASM)
#endif //defined(__XS3A__)