
#if defined(__XS3A__)

#include "asm_helper.h"


#define NSTACKWORDS     (10+8+8+8)

#define a           r0 
#define b           r1 
#define len         r2

#define incr        r3
#define tmp_vec     r4
#define ans_vec     r5
#define tmp_vec2    r6
#define bit_vec     r7
#define bit_pos     r8
#define bytemask    r9

#define STACK_BYTEMASK  1
#define STACK_ANS_VEC   (NSTACKWORDS-24)
#define STACK_TMP_VEC   (NSTACKWORDS-16)
#define STACK_TMP_VEC2  (NSTACKWORDS-8)



    // {                                           ;                                       }
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

/*  
headroom_t xs3_sqrt_vect_s16(
    int16_t* a,
    const int16_t* b,
    const unsigned length);
*/

#define FUNCTION_NAME xs3_sqrt_vect_s16
        
ASM_PREAMBLE(FUNCTION_NAME)

.align 4

.L_mode16:
.int 0x0100

.L_vec_ones_s16:
.short 0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000,0x4000

.L_vec_neg_ones_s16:
.short -0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000,-0x4000

.L_vec_bit_s16:
.short 0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001,0x0001

.L_vec_steen:
.short 16,16,16,16,16,16,16,16,16,16,16,16,16,16,16,16


FUNCTION_NAME:
    dualentsp NSTACKWORDS
    std r4, r5, sp[1]
    std r6, r7, sp[2]
    std r8, r9, sp[3]
    stw r10, sp[8]

    {   ldaw tmp_vec, sp[STACK_TMP_VEC]         ;                                       }
    {   ldaw ans_vec, sp[STACK_ANS_VEC]         ;                                       }
    {   ldaw tmp_vec2, sp[STACK_TMP_VEC2]       ;                                       }
    {   ldap r11, .L_vec_bit_s16                ;                                       }
    {                                           ;   mov bit_vec, r11                    }

    {   shl r11, len, SIZEOF_LOG2_S16           ;                                       }
    {   ldc incr, 32                            ;                                       }
    {   zext r11, 5                             ;   shr len, len, EPV_LOG2_S16          }
    {                                           ;   mkmsk r11, r11                      }
    {   ldap r11, .L_mode16                     ;   stw r11, sp[STACK_BYTEMASK]         }
    {                                           ;   ldw r11, r11[0]                     }
    {   mov r11, b                              ;   vsetc r11                           }
    {   mkmsk bytemask, 32                      ;   bt len, .L_loop_top_s16             }
    {                                           ;   ldw bytemask, sp[STACK_BYTEMASK]    }

.L_loop_top_s16:

    {                                           ;   bf bytemask, .L_loop_bot_s16        }
    {   ldc bit_pos, 14                         ;   ldc r11, 0                          }
    {   sub bit_pos, r11, bit_pos               ;   vclrdr                              }
    vstrpv a[0], bytemask

.L_loop2_top_s16:
    vlashr bit_vec[0], bit_pos
    {                                           ;   vladd a[0]                          } // vR = candidate
    {   ldap r11, .L_vec_neg_ones_s16           ;   vstr tmp_vec[0]                     } // tmp_vec = candidate
    {                                           ;   vlmul r11[0]                        } // vR = -candidate
    {                                           ;   vstr tmp_vec2[0]                    } // tmp_vec2 = -candidate
    {                                           ;   vldc tmp_vec2[0]                    } // vC = -candidate
    {                                           ;   vclrdr                              } // vD:vR = 0
    {                                           ;   vldd b[0]                           } // vD:vR = target * 2**16
    {   ldap r11, .L_vec_steen                  ;   vlmacc tmp_vec[0]                   } // vD:vR = b - (candidate * -candidate) = b - candidate^2
    {                                           ;   vlsat r11[0]                        }
    {                                           ;   vsign                               } // 
    {                                           ;   vpos                                } // vR = (b > (candidate^2)
    {                                           ;   vstr tmp_vec2[0]                    }
    vlashr bit_vec[0], bit_pos     
    {                                           ;   vlmul tmp_vec2[0]                   }
    {                                           ;   vladd a[0]                          } // vR = previous answer + new bit position if candidate^2 was less than b
    {                                           ;   vstr a[0]                           }    
    {   add bit_pos, bit_pos, 1                 ;   bt bit_pos, .L_loop2_top_s16        }


    {   add a, a, incr                          ;   add b, b, incr                      }
    {                                           ;                                       }
    {   sub len, len, 1                         ;   bt len, .L_loop_top_s16             }
    {                                           ;                                       }
    {                                           ;                                       }
    {                                           ;                                       }
    {                                           ;                                       }
    {                                           ;                                       }

.L_loop_bot_s16:

.L_done_s16:
    ldd r4, r5, sp[1]
    ldd r6, r7, sp[2]
    ldd r8, r9, sp[3]
    ldw r10, sp[8]
    retsp NSTACKWORDS


ASM_POSTAMBLE(FUNCTION_NAME, NSTACKWORDS)

#undef FUNCTION_NAME

//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////

/*  
headroom_t xs3_sqrt_vect_s32(
    int32_t* a,
    const int32_t* b,
    const unsigned length);
*/

#define FUNCTION_NAME xs3_sqrt_vect_s32
    
ASM_PREAMBLE(FUNCTION_NAME)



FUNCTION_NAME:
    dualentsp NSTACKWORDS
    std r4, r5, sp[1]
    std r6, r7, sp[2]
    std r8, r9, sp[3]
    stw r10, sp[8]

    {   shl r11, len, SIZEOF_LOG2_S32           ;                                       }
    {   ldc incr, 32                            ;                                       }
    {   zext r11, 5                             ;   shr len, len, EPV_LOG2_S32          }
    {   ldaw tmp_vec, sp[NSTACKWORDS-8]         ;   mkmsk r11, r11                      }
    {   ldc r11, 0                              ;   stw r11, sp[STACK_BYTEMASK]         }
    {   mov r11, b                              ;   vsetc r11                           }
    {   sub len, len, 1                         ;   bf len, .L_loop_bot_s32             }

.L_loop_top_s32:
    {                                           ;   vldr r11[0]                         }
    {                                           ;   vsign                               }
    {   add r11, r11, incr                      ;   vlmul r11[0]                        }
    {   add a, a, incr                          ;   vstr a[0]                           }
    {   sub len, len, 1                         ;   bt len, .L_loop_top_s32             }

.L_loop_bot_s32:
    {                                           ;   ldw bytemask, sp[STACK_BYTEMASK]    }
    {                                           ;   bf bytemask, .L_done_s32            }
    {                                           ;   vclrdr                              }
    {   mov b, r11                              ;   vldr r11[0]                         }
    {                                           ;   vsign                               }
    {                                           ;   vlmul b[0]                          }
    {   mov r11, tmp_vec                        ;   vstd tmp_vec[0]                     }
    vstrpv tmp_vec[0], bytemask
    {                                           ;   vldr r11[0]                         }
    {                                           ;   vstr r11[0]                         }
    vstrpv a[0], bytemask

.L_done_s32:
    ldd r4, r5, sp[1]
    ldd r6, r7, sp[2]
    ldd r8, r9, sp[3]
    ldw r10, sp[8]

    {   ldc r0, HR_SUB_S32                      ;   vgetc r11                           }
    {   zext r11, 5                             ;                                       }
    {   sub r0, r0, r11                         ;   retsp NSTACKWORDS                   }


ASM_POSTAMBLE(FUNCTION_NAME, NSTACKWORDS)

#undef FUNCTION_NAME


//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////


#endif //defined(__XS3A__)



